{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\Desktop\\\\tienda\\\\nextjs-shopify-master\\\\lib\\\\shopify\\\\storefront-data-hooks\\\\src\\\\CommerceProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ShopifyBuy from 'shopify-buy';\nimport { Context } from './Context';\nimport { LocalStorage, LocalStorageKeys } from './utils';\nexport function CommerceProvider(_ref) {\n  _s();\n\n  var storefrontAccessToken = _ref.storefrontAccessToken,\n      domain = _ref.domain,\n      children = _ref.children;\n\n  if (domain == null || storefrontAccessToken == null) {\n    throw new Error('Unable to build shopify-buy client object. Please make sure that your access token and domain are correct.');\n  }\n\n  var initialCart = LocalStorage.getInitialCart();\n\n  var _useState = useState(initialCart),\n      cart = _useState[0],\n      setCart = _useState[1];\n\n  var isCustomDomain = domain.includes('.');\n  var client = ShopifyBuy.buildClient({\n    storefrontAccessToken: storefrontAccessToken,\n    domain: isCustomDomain ? domain : \"\".concat(domain, \".myshopify.com\")\n  });\n  useEffect(function () {\n    function getNewCart() {\n      return _getNewCart.apply(this, arguments);\n    }\n\n    function _getNewCart() {\n      _getNewCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var newCart;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return client.checkout.create();\n\n              case 2:\n                newCart = _context.sent;\n                setCart(newCart);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getNewCart.apply(this, arguments);\n    }\n\n    function refreshExistingCart(_x) {\n      return _refreshExistingCart.apply(this, arguments);\n    }\n\n    function _refreshExistingCart() {\n      _refreshExistingCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cartId) {\n        var refreshedCart, cartHasBeenPurchased;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return client.checkout.fetch(cartId);\n\n              case 3:\n                refreshedCart = _context2.sent;\n\n                if (!(refreshedCart == null)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", getNewCart());\n\n              case 6:\n                cartHasBeenPurchased = Boolean(refreshedCart.completedAt);\n\n                if (cartHasBeenPurchased) {\n                  getNewCart();\n                } else {\n                  setCart(refreshedCart);\n                }\n\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.error(_context2.t0);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 10]]);\n      }));\n      return _refreshExistingCart.apply(this, arguments);\n    }\n\n    if (cart == null) {\n      getNewCart();\n    } else {\n      refreshExistingCart(String(cart.id));\n    }\n  }, []);\n  useEffect(function () {\n    LocalStorage.set(LocalStorageKeys.CART, JSON.stringify(cart));\n  }, [cart]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      client: client,\n      cart: cart,\n      setCart: setCart,\n      domain: domain,\n      storefrontAccessToken: storefrontAccessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CommerceProvider, \"Vsrdre3Q6v7l8yaUgqwCqpe6+oM=\");\n\n_c = CommerceProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommerceProvider\");","map":{"version":3,"sources":["C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/lib/shopify/storefront-data-hooks/src/CommerceProvider.tsx"],"names":["React","useState","useEffect","ShopifyBuy","Context","LocalStorage","LocalStorageKeys","CommerceProvider","storefrontAccessToken","domain","children","Error","initialCart","getInitialCart","cart","setCart","isCustomDomain","includes","client","buildClient","getNewCart","checkout","create","newCart","refreshExistingCart","cartId","fetch","refreshedCart","cartHasBeenPurchased","Boolean","completedAt","console","error","String","id","set","CART","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ShopifyBuy from 'shopify-buy'\nimport { Context } from './Context'\nimport { LocalStorage, LocalStorageKeys } from './utils'\n\nexport interface CommerceProviderProps extends ShopifyBuy.Config {\n  children: React.ReactNode\n}\n\nexport function CommerceProvider({\n  storefrontAccessToken,\n  domain,\n  children,\n}: CommerceProviderProps) {\n  if (domain == null || storefrontAccessToken == null) {\n    throw new Error(\n      'Unable to build shopify-buy client object. Please make sure that your access token and domain are correct.'\n    )\n  }\n\n  const initialCart = LocalStorage.getInitialCart()\n  const [cart, setCart] = useState<ShopifyBuy.Cart | null>(initialCart)\n\n  const isCustomDomain = domain.includes('.')\n\n  const client = ShopifyBuy.buildClient({\n    storefrontAccessToken,\n    domain: isCustomDomain ? domain : `${domain}.myshopify.com`,\n  })\n\n  useEffect(() => {\n    async function getNewCart() {\n      const newCart = await client.checkout.create()\n      setCart(newCart)\n    }\n\n    async function refreshExistingCart(cartId: string) {\n      try {\n        const refreshedCart = await client.checkout.fetch(cartId)\n\n        if (refreshedCart == null) {\n          return getNewCart()\n        }\n\n        const cartHasBeenPurchased = Boolean(refreshedCart.completedAt)\n\n        if (cartHasBeenPurchased) {\n          getNewCart()\n        } else {\n          setCart(refreshedCart)\n        }\n      } catch (error) {\n        console.error(error)\n      }\n    }\n\n    if (cart == null) {\n      getNewCart()\n    } else {\n      refreshExistingCart(String(cart.id))\n    }\n  }, [])\n\n  useEffect(() => {\n    LocalStorage.set(LocalStorageKeys.CART, JSON.stringify(cart))\n  }, [cart])\n\n  return (\n    <Context.Provider\n      value={{\n        client,\n        cart,\n        setCart,\n        domain,\n        storefrontAccessToken,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}