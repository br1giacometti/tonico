{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\Desktop\\\\tienda\\\\nextjs-shopify-master\\\\blocks\\\\ProductGrid\\\\ProductGrid.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport { useEffect, useState } from 'react';\nimport { LoadingDots } from '@components/ui';\nimport { Grid } from '@theme-ui/components';\nimport { ProductCardDemo, ProductCard } from '@components/common';\nimport { getCollection, getProduct } from '@lib/shopify/storefront-data-hooks/src/api/operations-builder';\nimport builderConfig from '@config/builder';\nexport const ProductGrid = ({\n  products: initialProducts,\n  collection,\n  productsList,\n  offset = 0,\n  limit = 10,\n  cardProps,\n  highlightCard\n}) => {\n  const {\n    0: products,\n    1: setProducts\n  } = useState(initialProducts || []);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    const getProducts = async () => {\n      setLoading(true);\n      const promises = productsList.map(entry => entry.product).filter(handle => typeof handle === 'string').map(async handle => await getProduct(builderConfig, {\n        handle\n      }));\n      setProducts(await Promise.all(promises));\n      setLoading(false);\n    };\n\n    if (productsList && !initialProducts) {\n      getProducts();\n    }\n  }, [productsList, initialProducts]);\n  useEffect(() => {\n    const fetchCollection = async () => {\n      setLoading(true);\n      const result = await getCollection(builderConfig, {\n        handle: collection\n      });\n      setProducts(result.products);\n      setLoading(false);\n    };\n\n    if (typeof collection === 'string' && !initialProducts) {\n      fetchCollection();\n    }\n  }, [collection]);\n\n  if (loading) {\n    return jsx(LoadingDots, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const ProductComponent = process.env.IS_DEMO ? ProductCardDemo : ProductCard;\n  return jsx(Grid, {\n    gap: 2,\n    width: ['100%', '40%', '24%'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, products.slice(offset, limit).map((product, i) => jsx(ProductComponent, _objectSpread(_objectSpread({\n    key: String(product.id) + i\n  }, (highlightCard === null || highlightCard === void 0 ? void 0 : highlightCard.index) === i ? highlightCard : cardProps), {}, {\n    product: product,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }))));\n};","map":{"version":3,"sources":["C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/blocks/ProductGrid/ProductGrid.tsx"],"names":["jsx","useEffect","useState","LoadingDots","Grid","ProductCardDemo","ProductCard","getCollection","getProduct","builderConfig","ProductGrid","products","initialProducts","collection","productsList","offset","limit","cardProps","highlightCard","setProducts","loading","setLoading","getProducts","promises","map","entry","product","filter","handle","Promise","all","fetchCollection","result","ProductComponent","process","env","IS_DEMO","slice","i","String","id","index"],"mappings":"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","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from 'theme-ui'\nimport { FC, useEffect, useState } from 'react'\nimport { LoadingDots } from '@components/ui'\nimport { Grid } from '@theme-ui/components'\nimport { ProductCardProps } from '@components/common/ProductCard'\nimport { ProductCardDemo, ProductCard } from '@components/common'\n\nimport {\n  getCollection,\n  getProduct,\n} from '@lib/shopify/storefront-data-hooks/src/api/operations-builder'\nimport builderConfig from '@config/builder'\ninterface HighlightedCardProps extends Omit<ProductCardProps, 'product'> {\n  index: number\n}\n\nexport interface ProductGridProps {\n  products?: ShopifyBuy.Product[]\n  productsList?: Array<{ product: string }>\n  collection?: string | any // ShopifyBuy.Collection\n  offset: number\n  limit: number\n  cardProps: Omit<ProductCardProps, 'product'>\n  highlightCard?: HighlightedCardProps\n}\n\nexport const ProductGrid: FC<ProductGridProps> = ({\n  products: initialProducts,\n  collection,\n  productsList,\n  offset = 0,\n  limit = 10,\n  cardProps,\n  highlightCard,\n}) => {\n  const [products, setProducts] = useState(initialProducts || [])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const getProducts = async () => {\n      setLoading(true)\n      const promises = productsList!\n        .map((entry) => entry.product)\n        .filter((handle: string | undefined) => typeof handle === 'string')\n        .map(\n          async (handle: string) => await getProduct(builderConfig, { handle })\n        )\n      setProducts(await Promise.all(promises))\n      setLoading(false)\n    }\n    if (productsList && !initialProducts) {\n      getProducts()\n    }\n  }, [productsList, initialProducts])\n\n  useEffect(() => {\n    const fetchCollection = async () => {\n      setLoading(true)\n      const result = await getCollection(builderConfig, {\n        handle: collection,\n      })\n      setProducts(result.products)\n      setLoading(false)\n    }\n    if (typeof collection === 'string' && !initialProducts) {\n      fetchCollection()\n    }\n  }, [collection])\n\n  if (loading) {\n    return <LoadingDots />\n  }\n  const ProductComponent: any = process.env.IS_DEMO\n    ? ProductCardDemo\n    : ProductCard\n\n  return (\n    <Grid gap={2} width={['100%', '40%', '24%']}>\n      {products.slice(offset, limit).map((product, i) => (\n        <ProductComponent\n          key={String(product.id) + i}\n          {...(highlightCard?.index === i ? highlightCard : cardProps)}\n          product={product}\n        />\n      ))}\n    </Grid>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}