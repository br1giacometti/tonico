{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\Desktop\\\\tienda\\\\nextjs-shopify-master\\\\lib\\\\shopify\\\\storefront-data-hooks\\\\src\\\\CommerceProvider.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport ShopifyBuy from 'shopify-buy';\nimport { Context } from './Context';\nimport { LocalStorage, LocalStorageKeys } from './utils';\nexport function CommerceProvider({\n  storefrontAccessToken,\n  domain,\n  children\n}) {\n  if (domain == null || storefrontAccessToken == null) {\n    throw new Error('Unable to build shopify-buy client object. Please make sure that your access token and domain are correct.');\n  }\n\n  const initialCart = LocalStorage.getInitialCart();\n  const {\n    0: cart,\n    1: setCart\n  } = useState(initialCart);\n  const isCustomDomain = domain.includes('.');\n  const client = ShopifyBuy.buildClient({\n    storefrontAccessToken,\n    domain: isCustomDomain ? domain : `${domain}.myshopify.com`\n  });\n  useEffect(() => {\n    async function getNewCart() {\n      const newCart = await client.checkout.create();\n      setCart(newCart);\n    }\n\n    async function refreshExistingCart(cartId) {\n      try {\n        const refreshedCart = await client.checkout.fetch(cartId);\n\n        if (refreshedCart == null) {\n          return getNewCart();\n        }\n\n        const cartHasBeenPurchased = Boolean(refreshedCart.completedAt);\n\n        if (cartHasBeenPurchased) {\n          getNewCart();\n        } else {\n          setCart(refreshedCart);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (cart == null) {\n      getNewCart();\n    } else {\n      refreshExistingCart(String(cart.id));\n    }\n  }, []);\n  useEffect(() => {\n    LocalStorage.set(LocalStorageKeys.CART, JSON.stringify(cart));\n  }, [cart]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      client,\n      cart,\n      setCart,\n      domain,\n      storefrontAccessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/lib/shopify/storefront-data-hooks/src/CommerceProvider.tsx"],"names":["React","useState","useEffect","ShopifyBuy","Context","LocalStorage","LocalStorageKeys","CommerceProvider","storefrontAccessToken","domain","children","Error","initialCart","getInitialCart","cart","setCart","isCustomDomain","includes","client","buildClient","getNewCart","newCart","checkout","create","refreshExistingCart","cartId","refreshedCart","fetch","cartHasBeenPurchased","Boolean","completedAt","error","console","String","id","set","CART","JSON","stringify"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,SAA/C;AAMA,OAAO,SAASC,gBAAT,CAA0B;AAC/BC,EAAAA,qBAD+B;AAE/BC,EAAAA,MAF+B;AAG/BC,EAAAA;AAH+B,CAA1B,EAImB;AACxB,MAAID,MAAM,IAAI,IAAV,IAAkBD,qBAAqB,IAAI,IAA/C,EAAqD;AACnD,UAAM,IAAIG,KAAJ,CACJ,4GADI,CAAN;AAGD;;AAED,QAAMC,WAAW,GAAGP,YAAY,CAACQ,cAAb,EAApB;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBd,QAAQ,CAAyBW,WAAzB,CAAhC;AAEA,QAAMI,cAAc,GAAGP,MAAM,CAACQ,QAAP,CAAgB,GAAhB,CAAvB;AAEA,QAAMC,MAAM,GAAGf,UAAU,CAACgB,WAAX,CAAuB;AACpCX,IAAAA,qBADoC;AAEpCC,IAAAA,MAAM,EAAEO,cAAc,GAAGP,MAAH,GAAa,GAAEA,MAAO;AAFR,GAAvB,CAAf;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAekB,UAAf,GAA4B;AAC1B,YAAMC,OAAO,GAAG,MAAMH,MAAM,CAACI,QAAP,CAAgBC,MAAhB,EAAtB;AACAR,MAAAA,OAAO,CAACM,OAAD,CAAP;AACD;;AAED,mBAAeG,mBAAf,CAAmCC,MAAnC,EAAmD;AACjD,UAAI;AACF,cAAMC,aAAa,GAAG,MAAMR,MAAM,CAACI,QAAP,CAAgBK,KAAhB,CAAsBF,MAAtB,CAA5B;;AAEA,YAAIC,aAAa,IAAI,IAArB,EAA2B;AACzB,iBAAON,UAAU,EAAjB;AACD;;AAED,cAAMQ,oBAAoB,GAAGC,OAAO,CAACH,aAAa,CAACI,WAAf,CAApC;;AAEA,YAAIF,oBAAJ,EAA0B;AACxBR,UAAAA,UAAU;AACX,SAFD,MAEO;AACLL,UAAAA,OAAO,CAACW,aAAD,CAAP;AACD;AACF,OAdD,CAcE,OAAOK,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;;AAED,QAAIjB,IAAI,IAAI,IAAZ,EAAkB;AAChBM,MAAAA,UAAU;AACX,KAFD,MAEO;AACLI,MAAAA,mBAAmB,CAACS,MAAM,CAACnB,IAAI,CAACoB,EAAN,CAAP,CAAnB;AACD;AACF,GA/BQ,EA+BN,EA/BM,CAAT;AAiCAhC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,YAAY,CAAC8B,GAAb,CAAiB7B,gBAAgB,CAAC8B,IAAlC,EAAwCC,IAAI,CAACC,SAAL,CAAexB,IAAf,CAAxC;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA,sBACE,QAAC,OAAD,CAAS,QAAT;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,MADK;AAELJ,MAAAA,IAFK;AAGLC,MAAAA,OAHK;AAILN,MAAAA,MAJK;AAKLD,MAAAA;AALK,KADT;AAAA,cASGE;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ShopifyBuy from 'shopify-buy'\nimport { Context } from './Context'\nimport { LocalStorage, LocalStorageKeys } from './utils'\n\nexport interface CommerceProviderProps extends ShopifyBuy.Config {\n  children: React.ReactNode\n}\n\nexport function CommerceProvider({\n  storefrontAccessToken,\n  domain,\n  children,\n}: CommerceProviderProps) {\n  if (domain == null || storefrontAccessToken == null) {\n    throw new Error(\n      'Unable to build shopify-buy client object. Please make sure that your access token and domain are correct.'\n    )\n  }\n\n  const initialCart = LocalStorage.getInitialCart()\n  const [cart, setCart] = useState<ShopifyBuy.Cart | null>(initialCart)\n\n  const isCustomDomain = domain.includes('.')\n\n  const client = ShopifyBuy.buildClient({\n    storefrontAccessToken,\n    domain: isCustomDomain ? domain : `${domain}.myshopify.com`,\n  })\n\n  useEffect(() => {\n    async function getNewCart() {\n      const newCart = await client.checkout.create()\n      setCart(newCart)\n    }\n\n    async function refreshExistingCart(cartId: string) {\n      try {\n        const refreshedCart = await client.checkout.fetch(cartId)\n\n        if (refreshedCart == null) {\n          return getNewCart()\n        }\n\n        const cartHasBeenPurchased = Boolean(refreshedCart.completedAt)\n\n        if (cartHasBeenPurchased) {\n          getNewCart()\n        } else {\n          setCart(refreshedCart)\n        }\n      } catch (error) {\n        console.error(error)\n      }\n    }\n\n    if (cart == null) {\n      getNewCart()\n    } else {\n      refreshExistingCart(String(cart.id))\n    }\n  }, [])\n\n  useEffect(() => {\n    LocalStorage.set(LocalStorageKeys.CART, JSON.stringify(cart))\n  }, [cart])\n\n  return (\n    <Context.Provider\n      value={{\n        client,\n        cart,\n        setCart,\n        domain,\n        storefrontAccessToken,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}