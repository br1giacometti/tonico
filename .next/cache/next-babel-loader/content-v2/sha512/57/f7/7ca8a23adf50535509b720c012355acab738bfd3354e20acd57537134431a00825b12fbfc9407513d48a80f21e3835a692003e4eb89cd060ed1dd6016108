{"ast":null,"code":"import { builder, Builder } from '@builder.io/react';\nimport { getAsyncProps } from '@builder.io/utils';\nimport builderConfig from '@config/builder';\nimport { getCollection, getProduct } from './shopify/storefront-data-hooks/src/api/operations-builder';\nbuilder.init(builderConfig.apiKey);\nBuilder.isStatic = true;\nexport async function resolveBuilderContent(modelName, targetingAttributes) {\n  let page = await builder.get(modelName, {\n    userAttributes: targetingAttributes,\n    includeRefs: true,\n    preview: modelName,\n    cachebust: true\n  }).toPromise();\n\n  if (page) {\n    return await getAsyncProps(page, {\n      async ProductGrid(props) {\n        let products = [];\n\n        if (props.productsList) {\n          const promises = props.productsList.map(entry => entry.product).filter(handle => typeof handle === 'string').map(async (handle) => await getProduct(builderConfig, {\n            handle\n          }));\n          products = await Promise.all(promises);\n        }\n\n        return {\n          // resolve the query as `products` for ssr\n          // used for example in ProductGrid.tsx as initialProducts\n          products\n        };\n      },\n\n      async CollectionBox(props) {\n        let collection = props.collection;\n\n        if (collection && typeof collection === 'string') {\n          collection = await getCollection(builderConfig, {\n            handle: collection\n          });\n        }\n\n        return {\n          collection\n        };\n      },\n\n      async ProductBox(props) {\n        let product = props.product;\n\n        if (product && typeof product === 'string') {\n          product = await getProduct(builderConfig, {\n            handle: product\n          });\n        }\n\n        return {\n          product\n        };\n      },\n\n      async ProductCollectionGrid({\n        collection\n      }) {\n        if (collection && typeof collection === 'string') {\n          const {\n            products\n          } = await getCollection(builderConfig, {\n            handle: collection\n          });\n          return {\n            products\n          };\n        }\n      }\n\n    });\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/lib/resolve-builder-content.ts"],"names":["builder","Builder","getAsyncProps","builderConfig","getCollection","getProduct","init","apiKey","isStatic","resolveBuilderContent","modelName","targetingAttributes","page","get","userAttributes","includeRefs","preview","cachebust","toPromise","ProductGrid","props","products","productsList","promises","map","entry","product","filter","handle","Promise","all","CollectionBox","collection","ProductBox","ProductCollectionGrid"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,mBAAjC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SACEC,aADF,EAEEC,UAFF,QAIO,4DAJP;AAKAL,OAAO,CAACM,IAAR,CAAaH,aAAa,CAACI,MAA3B;AACAN,OAAO,CAACO,QAAR,GAAmB,IAAnB;AAEA,OAAO,eAAeC,qBAAf,CACLC,SADK,EAELC,mBAFK,EAGL;AACA,MAAIC,IAAI,GAAG,MAAMZ,OAAO,CACrBa,GADc,CACVH,SADU,EACC;AACdI,IAAAA,cAAc,EAAEH,mBADF;AAEdI,IAAAA,WAAW,EAAE,IAFC;AAGdC,IAAAA,OAAO,EAAEN,SAHK;AAIdO,IAAAA,SAAS,EAAE;AAJG,GADD,EAOdC,SAPc,EAAjB;;AASA,MAAIN,IAAJ,EAAU;AACR,WAAO,MAAMV,aAAa,CAACU,IAAD,EAAO;AAC/B,YAAMO,WAAN,CAAkBC,KAAlB,EAAyB;AACvB,YAAIC,QAAe,GAAG,EAAtB;;AACA,YAAID,KAAK,CAACE,YAAV,EAAwB;AACtB,gBAAMC,QAAQ,GAAGH,KAAK,CAACE,YAAN,CACdE,GADc,CACTC,KAAD,IAAgBA,KAAK,CAACC,OADZ,EAEdC,MAFc,CAENC,MAAD,IAAgC,OAAOA,MAAP,KAAkB,QAF3C,EAGdJ,GAHc,CAIb,OAAOI,MAAP,KACE,MAAMvB,UAAU,CAACF,aAAD,EAAgB;AAAEyB,YAAAA;AAAF,WAAhB,CALL,CAAjB;AAOAP,UAAAA,QAAQ,GAAG,MAAMQ,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAjB;AACD;;AACD,eAAO;AACL;AACA;AACAF,UAAAA;AAHK,SAAP;AAKD,OAlB8B;;AAmB/B,YAAMU,aAAN,CAAoBX,KAApB,EAA2B;AACzB,YAAIY,UAAU,GAAGZ,KAAK,CAACY,UAAvB;;AACA,YAAIA,UAAU,IAAI,OAAOA,UAAP,KAAsB,QAAxC,EAAkD;AAChDA,UAAAA,UAAU,GAAG,MAAM5B,aAAa,CAACD,aAAD,EAAgB;AAC9CyB,YAAAA,MAAM,EAAEI;AADsC,WAAhB,CAAhC;AAGD;;AACD,eAAO;AACLA,UAAAA;AADK,SAAP;AAGD,OA7B8B;;AA8B/B,YAAMC,UAAN,CAAiBb,KAAjB,EAAwB;AACtB,YAAIM,OAAO,GAAGN,KAAK,CAACM,OAApB;;AACA,YAAIA,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAAlC,EAA4C;AAC1CA,UAAAA,OAAO,GAAG,MAAMrB,UAAU,CAACF,aAAD,EAAgB;AACxCyB,YAAAA,MAAM,EAAEF;AADgC,WAAhB,CAA1B;AAGD;;AACD,eAAO;AACLA,UAAAA;AADK,SAAP;AAGD,OAxC8B;;AA0C/B,YAAMQ,qBAAN,CAA4B;AAAEF,QAAAA;AAAF,OAA5B,EAA4C;AAC1C,YAAIA,UAAU,IAAI,OAAOA,UAAP,KAAsB,QAAxC,EAAkD;AAChD,gBAAM;AAAEX,YAAAA;AAAF,cAAe,MAAMjB,aAAa,CAACD,aAAD,EAAgB;AACtDyB,YAAAA,MAAM,EAAEI;AAD8C,WAAhB,CAAxC;AAGA,iBAAO;AACLX,YAAAA;AADK,WAAP;AAGD;AACF;;AAnD8B,KAAP,CAA1B;AAqDD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import { builder, Builder } from '@builder.io/react'\nimport { getAsyncProps } from '@builder.io/utils'\nimport builderConfig from '@config/builder'\nimport {\n  getCollection,\n  getProduct,\n  searchProducts,\n} from './shopify/storefront-data-hooks/src/api/operations-builder'\nbuilder.init(builderConfig.apiKey)\nBuilder.isStatic = true\n\nexport async function resolveBuilderContent(\n  modelName: string,\n  targetingAttributes?: any\n) {\n  let page = await builder\n    .get(modelName, {\n      userAttributes: targetingAttributes,\n      includeRefs: true,\n      preview: modelName,\n      cachebust: true,\n    } as any)\n    .toPromise()\n\n  if (page) {\n    return await getAsyncProps(page, {\n      async ProductGrid(props) {\n        let products: any[] = []\n        if (props.productsList) {\n          const promises = props.productsList\n            .map((entry: any) => entry.product)\n            .filter((handle: string | undefined) => typeof handle === 'string')\n            .map(\n              async (handle: string) =>\n                await getProduct(builderConfig, { handle })\n            )\n          products = await Promise.all(promises)\n        }\n        return {\n          // resolve the query as `products` for ssr\n          // used for example in ProductGrid.tsx as initialProducts\n          products,\n        }\n      },\n      async CollectionBox(props) {\n        let collection = props.collection\n        if (collection && typeof collection === 'string') {\n          collection = await getCollection(builderConfig, {\n            handle: collection,\n          })\n        }\n        return {\n          collection,\n        }\n      },\n      async ProductBox(props) {\n        let product = props.product\n        if (product && typeof product === 'string') {\n          product = await getProduct(builderConfig, {\n            handle: product,\n          })\n        }\n        return {\n          product,\n        }\n      },\n\n      async ProductCollectionGrid({ collection }) {\n        if (collection && typeof collection === 'string') {\n          const { products } = await getCollection(builderConfig, {\n            handle: collection,\n          })\n          return {\n            products,\n          }\n        }\n      },\n    })\n  }\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}