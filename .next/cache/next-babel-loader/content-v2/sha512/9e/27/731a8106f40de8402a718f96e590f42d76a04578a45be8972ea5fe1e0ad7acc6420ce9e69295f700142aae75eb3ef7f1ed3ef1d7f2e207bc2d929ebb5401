{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { Context } from '../Context';\nimport { useGetLineItem } from './useGetLineItem';\nexport function useUpdateItemQuantity() {\n  _s();\n\n  var _useContext = useContext(Context),\n      client = _useContext.client,\n      cart = _useContext.cart,\n      setCart = _useContext.setCart;\n\n  var getLineItem = useGetLineItem();\n\n  function updateItemQuantity(_x, _x2) {\n    return _updateItemQuantity.apply(this, arguments);\n  }\n\n  function _updateItemQuantity() {\n    _updateItemQuantity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(variantId, quantity) {\n      var lineItem, newCart;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(variantId == null)) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('Must provide a variant id');\n\n            case 2:\n              if (!(quantity == null || Number(quantity) < 0)) {\n                _context.next = 4;\n                break;\n              }\n\n              throw new Error('Quantity must be greater than 0');\n\n            case 4:\n              lineItem = getLineItem(variantId);\n\n              if (!(lineItem == null)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error(\"Item with variantId \".concat(variantId, \" not in cart\"));\n\n            case 7:\n              _context.next = 9;\n              return client.checkout.updateLineItems(cart.id, [{\n                id: lineItem.id,\n                quantity: quantity\n              }]);\n\n            case 9:\n              newCart = _context.sent;\n              setCart(newCart);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _updateItemQuantity.apply(this, arguments);\n  }\n\n  return updateItemQuantity;\n}\n\n_s(useUpdateItemQuantity, \"pW6gWtK6d1VFuw5/dFW+RRvXMZQ=\", false, function () {\n  return [useGetLineItem];\n});","map":{"version":3,"sources":["C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/lib/shopify/storefront-data-hooks/src/hooks/useUpdateItemQuantity.ts"],"names":["useContext","Context","useGetLineItem","useUpdateItemQuantity","client","cart","setCart","getLineItem","updateItemQuantity","variantId","quantity","Error","Number","lineItem","checkout","updateLineItems","id","newCart"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,qBAAT,GAAiC;AAAA;;AAAA,oBACJH,UAAU,CAACC,OAAD,CADN;AAAA,MAC9BG,MAD8B,eAC9BA,MAD8B;AAAA,MACtBC,IADsB,eACtBA,IADsB;AAAA,MAChBC,OADgB,eAChBA,OADgB;;AAEtC,MAAMC,WAAW,GAAGL,cAAc,EAAlC;;AAFsC,WAIvBM,kBAJuB;AAAA;AAAA;;AAAA;AAAA,mFAItC,iBACEC,SADF,EAEEC,QAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIMD,SAAS,IAAI,IAJnB;AAAA;AAAA;AAAA;;AAAA,oBAKU,IAAIE,KAAJ,CAAU,2BAAV,CALV;;AAAA;AAAA,oBAQMD,QAAQ,IAAI,IAAZ,IAAoBE,MAAM,CAACF,QAAD,CAAN,GAAmB,CAR7C;AAAA;AAAA;AAAA;;AAAA,oBASU,IAAIC,KAAJ,CAAU,iCAAV,CATV;;AAAA;AAYQE,cAAAA,QAZR,GAYmBN,WAAW,CAACE,SAAD,CAZ9B;;AAAA,oBAaMI,QAAQ,IAAI,IAblB;AAAA;AAAA;AAAA;;AAAA,oBAcU,IAAIF,KAAJ,+BAAiCF,SAAjC,kBAdV;;AAAA;AAAA;AAAA,qBAmBwBL,MAAM,CAACU,QAAP,CAAgBC,eAAhB,CAAgCV,IAAI,CAACW,EAArC,EAAyC,CAC7D;AAAEA,gBAAAA,EAAE,EAAEH,QAAQ,CAACG,EAAf;AAAmBN,gBAAAA,QAAQ,EAARA;AAAnB,eAD6D,CAAzC,CAnBxB;;AAAA;AAmBQO,cAAAA,OAnBR;AAsBEX,cAAAA,OAAO,CAACW,OAAD,CAAP;;AAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJsC;AAAA;AAAA;;AA6BtC,SAAOT,kBAAP;AACD;;GA9BeL,qB;UAEMD,c","sourcesContent":["import { useContext } from 'react'\nimport { Context } from '../Context'\n\nimport { useGetLineItem } from './useGetLineItem'\n\nexport function useUpdateItemQuantity() {\n  const { client, cart, setCart } = useContext(Context)\n  const getLineItem = useGetLineItem()\n\n  async function updateItemQuantity(\n    variantId: string | number,\n    quantity: number\n  ) {\n    if (variantId == null) {\n      throw new Error('Must provide a variant id')\n    }\n\n    if (quantity == null || Number(quantity) < 0) {\n      throw new Error('Quantity must be greater than 0')\n    }\n\n    const lineItem = getLineItem(variantId)\n    if (lineItem == null) {\n      throw new Error(`Item with variantId ${variantId} not in cart`)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    const newCart = await client.checkout.updateLineItems(cart.id, [\n      { id: lineItem.id, quantity },\n    ])\n    setCart(newCart)\n  }\n\n  return updateItemQuantity\n}\n"]},"metadata":{},"sourceType":"module"}