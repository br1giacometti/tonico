{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\Desktop\\\\tienda\\\\nextjs-shopify-master\\\\pages\\\\_document.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport cheerio from 'cheerio';\n/**\n * See this issue for more details https://github.com/emotion-js/emotion/issues/2040\n * Theme-ui using emotion which render styles inside template tags causing it not to apply when rendering\n * A/B test variations on the server, this fixes this issue by extracting those styles and appending them to body\n */\n\nconst extractABTestingStyles = body => {\n  let globalStyles = '';\n\n  if (body.includes('<template')) {\n    const $ = cheerio.load(body);\n    const templates = $('template');\n    templates.toArray().forEach(element => {\n      const str = $(element).html();\n      const styles = cheerio.load(String(str))('style');\n      globalStyles += styles.toArray().map(el => $(el).html()).join(' ');\n    });\n  }\n\n  return globalStyles;\n};\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const originalRenderPage = ctx.renderPage;\n    let globalStyles = '';\n\n    ctx.renderPage = async options => {\n      const render = await originalRenderPage(options);\n      globalStyles = extractABTestingStyles(render.html);\n      return render;\n    };\n\n    const initialProps = await Document.getInitialProps(ctx);\n    return _objectSpread(_objectSpread({}, initialProps), {}, {\n      globalStyles\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Html, {\n      children: [/*#__PURE__*/_jsxDEV(Head, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n        children: [/*#__PURE__*/_jsxDEV(\"style\", {\n          dangerouslySetInnerHTML: {\n            __html: this.props.globalStyles\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NextScript, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MyDocument;","map":{"version":3,"sources":["C:/Users/Bruno/Desktop/tienda/nextjs-shopify-master/pages/_document.tsx"],"names":["Document","Html","Head","Main","NextScript","cheerio","extractABTestingStyles","body","globalStyles","includes","$","load","templates","toArray","forEach","element","str","html","styles","String","map","el","join","MyDocument","getInitialProps","ctx","originalRenderPage","renderPage","options","render","initialProps","__html","props"],"mappings":";;;;;;;;;AAAA,OAAOA,QAAP,IACEC,IADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,UAJF,QAMO,eANP;AAOA,OAAOC,OAAP,MAAoB,SAApB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAIC,IAAD,IAAkB;AAC/C,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAID,IAAI,CAACE,QAAL,CAAc,WAAd,CAAJ,EAAgC;AAC9B,UAAMC,CAAC,GAAGL,OAAO,CAACM,IAAR,CAAaJ,IAAb,CAAV;AACA,UAAMK,SAAS,GAAGF,CAAC,CAAC,UAAD,CAAnB;AACAE,IAAAA,SAAS,CAACC,OAAV,GAAoBC,OAApB,CAA6BC,OAAD,IAAa;AACvC,YAAMC,GAAG,GAAGN,CAAC,CAACK,OAAD,CAAD,CAAWE,IAAX,EAAZ;AACA,YAAMC,MAAM,GAAGb,OAAO,CAACM,IAAR,CAAaQ,MAAM,CAACH,GAAD,CAAnB,EAA0B,OAA1B,CAAf;AACAR,MAAAA,YAAY,IAAIU,MAAM,CACnBL,OADa,GAEbO,GAFa,CAERC,EAAD,IAAQX,CAAC,CAACW,EAAD,CAAD,CAAMJ,IAAN,EAFC,EAGbK,IAHa,CAGR,GAHQ,CAAhB;AAID,KAPD;AAQD;;AACD,SAAOd,YAAP;AACD,CAhBD;;AAkBA,MAAMe,UAAN,SAAyBvB,QAAzB,CAAkC;AAChC,eAAawB,eAAb,CAA6BC,GAA7B,EAAmD;AACjD,UAAMC,kBAAkB,GAAGD,GAAG,CAACE,UAA/B;AAEA,QAAInB,YAAY,GAAG,EAAnB;;AACAiB,IAAAA,GAAG,CAACE,UAAJ,GAAiB,MAAOC,OAAP,IAAmB;AAClC,YAAMC,MAAM,GAAG,MAAMH,kBAAkB,CAACE,OAAD,CAAvC;AACApB,MAAAA,YAAY,GAAGF,sBAAsB,CAACuB,MAAM,CAACZ,IAAR,CAArC;AACA,aAAOY,MAAP;AACD,KAJD;;AAKA,UAAMC,YAAY,GAAG,MAAM9B,QAAQ,CAACwB,eAAT,CAAyBC,GAAzB,CAA3B;AACA,2CACKK,YADL;AAEEtB,MAAAA;AAFF;AAID;;AACDqB,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,IAAD;AAAA,8BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AACE,UAAA,uBAAuB,EAAE;AACvBE,YAAAA,MAAM,EAAG,KAAKC,KAAN,CAAoBxB;AADL;AAD3B;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AA/B+B;;AAkClC,eAAee,UAAf","sourcesContent":["import Document, {\n  Html,\n  Head,\n  Main,\n  NextScript,\n  DocumentContext,\n} from 'next/document'\nimport cheerio from 'cheerio'\n\n/**\n * See this issue for more details https://github.com/emotion-js/emotion/issues/2040\n * Theme-ui using emotion which render styles inside template tags causing it not to apply when rendering\n * A/B test variations on the server, this fixes this issue by extracting those styles and appending them to body\n */\nconst extractABTestingStyles = (body: string) => {\n  let globalStyles = ''\n\n  if (body.includes('<template')) {\n    const $ = cheerio.load(body)\n    const templates = $('template')\n    templates.toArray().forEach((element) => {\n      const str = $(element).html()\n      const styles = cheerio.load(String(str))('style')\n      globalStyles += styles\n        .toArray()\n        .map((el) => $(el).html())\n        .join(' ')\n    })\n  }\n  return globalStyles\n}\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx: DocumentContext) {\n    const originalRenderPage = ctx.renderPage\n\n    let globalStyles = ''\n    ctx.renderPage = async (options) => {\n      const render = await originalRenderPage(options)\n      globalStyles = extractABTestingStyles(render.html)\n      return render\n    }\n    const initialProps = await Document.getInitialProps(ctx)\n    return {\n      ...initialProps,\n      globalStyles,\n    }\n  }\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <style\n            dangerouslySetInnerHTML={{\n              __html: (this.props as any).globalStyles,\n            }}\n          ></style>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n\nexport default MyDocument\n"]},"metadata":{},"sourceType":"module"}