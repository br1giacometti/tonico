import { ComponentProps, ComponentType, CSSProperties, HTMLAttributes, ReactNode } from 'react';
import { UseTransitionProps } from 'react-spring';
export declare const AnimatedDialogOverlay: import("react").ForwardRefExoticComponent<import("@reach/dialog/dist/declarations/src").DialogProps & {
    dangerouslyBypassFocusLock?: boolean | undefined;
    dangerouslyBypassScrollLock?: boolean | undefined;
} & Omit<any, "as" | keyof import("@reach/dialog/dist/declarations/src").DialogProps | "dangerouslyBypassFocusLock" | "dangerouslyBypassScrollLock"> & {
    as?: import("@reach/utils").As<any> | undefined;
} & {
    as: import("@reach/utils").As<any>;
}>;
export declare const AnimatedDialogContent: import("react").ForwardRefExoticComponent<import("@reach/dialog/dist/declarations/src").DialogContentProps & Omit<any, "as" | "children"> & {
    as?: import("@reach/utils").As<any> | undefined;
} & {
    as: import("@reach/utils").As<any>;
}>;
declare type CssTransitionProps = UseTransitionProps<boolean, CSSProperties>;
interface ModalTransition {
    initial?: CssTransitionProps['initial'];
    from?: CssTransitionProps['from'];
    enter?: CssTransitionProps['enter'];
    leave?: CssTransitionProps['leave'];
}
declare type ReplacePartial<Type, Keys> = {
    [key in Exclude<keyof Type, Keys>]: Type[key];
} & {
    [key in keyof Type]?: Type[key] | undefined;
};
declare type OverlayProps = HTMLAttributes<Element> & ReplacePartial<ComponentProps<typeof AnimatedDialogOverlay>, 'as'>;
declare type ContentProps = HTMLAttributes<Element> & ReplacePartial<ComponentProps<typeof AnimatedDialogContent>, 'as'>;
interface BaseModalProps {
    isOpen: boolean;
    onDismiss?: (event?: React.SyntheticEvent) => void;
    children: ReactNode;
    dangerouslyBypassFocusLock?: boolean;
    overlayProps?: OverlayProps;
    overlayTransition?: ModalTransition;
    contentProps?: ContentProps;
    contentTransition?: ModalTransition;
    transitionConfig?: Omit<CssTransitionProps, 'initial' | 'from' | 'enter' | 'leave'> & {
        onRest?: (isOpen: boolean, animationStatus: string) => void;
    };
    labelId?: string;
}
export declare function BaseModal({ isOpen, onDismiss, children, dangerouslyBypassFocusLock, overlayProps: { style: overlayStyle, className: overlayClassName, ...otherOverlayProps }, overlayTransition, contentProps: { style: contentStyle, className: contentClassName, ...otherContentProps }, contentTransition, transitionConfig, labelId }: BaseModalProps): JSX.Element;
/** Modal Utility Components */
interface ModalTitleProps extends HTMLAttributes<Element> {
    as?: ComponentType | keyof JSX.IntrinsicElements;
    children: ReactNode;
}
export declare function ModalTitle({ as: Component, id, ...props }: ModalTitleProps): JSX.Element;
interface ModalCloseTargetProps {
    children: ReactNode;
}
export declare function ModalCloseTarget({ children }: ModalCloseTargetProps): JSX.Element;
/** Pre-built Custom Modals */
export declare function CenterModal({ overlayProps, contentProps, ...props }: BaseModalProps): JSX.Element;
export declare function BottomModal({ overlayProps, contentProps, ...props }: BaseModalProps): JSX.Element;
interface ExpandModalProps extends BaseModalProps {
    x?: number;
    y?: number;
}
export declare function ExpandModal({ overlayProps, contentProps, x, y, ...props }: ExpandModalProps): JSX.Element;
export {};
