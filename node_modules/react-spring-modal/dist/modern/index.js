import { jsx, Fragment } from 'react/jsx-runtime';
import { createContext, useState, useMemo, useContext, Children, isValidElement, cloneElement } from 'react';
import { animated, useTransition } from 'react-spring';
import { DialogOverlay, DialogContent } from '@reach/dialog';
import { useId } from '@reach/auto-id';

const AnimatedDialogOverlay = animated(DialogOverlay);
const AnimatedDialogContent = animated(DialogContent);
const emptyObject = {};
/**
 * Input: `{ opacity: 0 }`
 * Output: `{ 'overlay__opacity': 0 }`
 */
function prefixProperties(prefix, props) {
    if (typeof props === 'object' && props !== null) {
        return Object.fromEntries(Object.entries(props).map(([key, value]) => [`${prefix}__${key}`, value]));
    }
    return emptyObject;
}
/**
 * Input: `{ 'overlay__opacity': 0, other: 'stuff' }`
 * Output: `{ opacity: 0 }`
 */
function removePropertyPrefixes(prefix, props) {
    return Object.fromEntries(Object.entries(props)
        .filter(([key]) => key.startsWith(prefix + '__'))
        .map(([key, value]) => [key.replace(prefix + '__', ''), value]));
}
const defaultOverlayTransition = {
    from: { opacity: 0 },
    enter: { opacity: 1 },
    leave: { opacity: 0 }
};
const ModalContext = createContext({});
function BaseModal({ isOpen, onDismiss, children, dangerouslyBypassFocusLock, overlayProps: { style: overlayStyle = emptyObject, className: overlayClassName = '', ...otherOverlayProps } = emptyObject, overlayTransition = defaultOverlayTransition, contentProps: { style: contentStyle = emptyObject, className: contentClassName = '', ...otherContentProps } = emptyObject, contentTransition, transitionConfig = emptyObject, labelId }) {
    const [status, setStatus] = useState('focus-unlocked');
    const values = useMemo(() => ({
        initial: {
            ...prefixProperties('overlay', overlayTransition?.initial),
            ...prefixProperties('content', contentTransition?.initial)
        },
        from: {
            ...prefixProperties('overlay', overlayTransition?.from),
            ...prefixProperties('content', contentTransition?.from)
        },
        enter: {
            ...prefixProperties('overlay', overlayTransition?.enter),
            ...prefixProperties('content', contentTransition?.enter)
        },
        leave: {
            ...prefixProperties('overlay', overlayTransition?.leave),
            ...prefixProperties('content', contentTransition?.leave)
        },
        ...transitionConfig,
        onRest(isOpen, animationStatus) {
            if (typeof transitionConfig.onRest === 'function') {
                transitionConfig?.onRest(isOpen, animationStatus);
            }
            if (animationStatus === 'update')
                setStatus(isOpen ? 'focus-locked' : 'focus-unlocked'); // if done opening, lock focus. if done closing, unlock focus
        }
    }), [overlayTransition, contentTransition, transitionConfig]);
    const transition = useTransition(isOpen, null, values);
    labelId = useId(labelId);
    // If the dev doesn't set `dangerouslyBypassFocusLock`, use our status
    if (dangerouslyBypassFocusLock === undefined)
        dangerouslyBypassFocusLock = status === 'focus-unlocked';
    return (jsx(ModalContext.Provider, Object.assign({ value: { labelId, onDismiss } }, { children: transition.map(({ item, key, props: styles }) => item && (jsx(AnimatedDialogOverlay, Object.assign({ as: "div", onDismiss: onDismiss, dangerouslyBypassFocusLock: dangerouslyBypassFocusLock, style: {
                ...removePropertyPrefixes('overlay', styles),
                ...overlayStyle
            }, className: `ModalOverlay ${overlayClassName}` }, otherOverlayProps, { children: jsx(AnimatedDialogContent, Object.assign({ as: "div", style: {
                    ...removePropertyPrefixes('content', styles),
                    ...contentStyle
                }, className: `ModalContent ${contentClassName}`, "aria-labelledby": labelId }, otherContentProps, { children: children }), void 0) }), key))) }), void 0));
}
function ModalTitle({ as: Component = 'h1', id, ...props }) {
    const { labelId } = useContext(ModalContext);
    return jsx(Component, Object.assign({ id: id || labelId }, props), void 0);
}
function ModalCloseTarget({ children }) {
    const { onDismiss } = useContext(ModalContext);
    return (jsx(Fragment, { children: Children.map(children, child => {
            if (isValidElement(child)) {
                const onClick = (event) => {
                    if (onDismiss)
                        onDismiss(event);
                    if (child.props.onClick)
                        child.props.onClick(event);
                };
                return cloneElement(child, { onClick });
            }
            return child;
        }) }, void 0));
}
/** Pre-built Custom Modals */
function CenterModal({ overlayProps, contentProps, ...props }) {
    return (jsx(BaseModal, Object.assign({ overlayProps: { ...overlayProps, className: 'ModalOverlay--center ' + overlayProps?.className ?? '' }, contentProps: { ...contentProps, className: 'CenterModal ' + contentProps?.className ?? '' } }, props), void 0));
}
function BottomModal({ overlayProps, contentProps, ...props }) {
    return (jsx(BaseModal, Object.assign({ overlayProps: { ...overlayProps, className: 'ModalOverlay--bottom ' + overlayProps?.className ?? '' }, contentProps: { ...contentProps, className: 'BottomModal ' + contentProps?.className ?? '' }, contentTransition: {
            initial: { transform: 'translateY(100%)' },
            from: { transform: 'translateY(100%)' },
            enter: { transform: 'translateY(0%)' },
            leave: { transform: 'translateY(100%)' }
        } }, props), void 0));
}
function ExpandModal({ overlayProps, contentProps, x = 50, y = 50, ...props }) {
    return (jsx(BaseModal, Object.assign({ overlayProps: { ...overlayProps, className: 'ExpandModal__overlay ' + overlayProps?.className }, contentTransition: {
            from: { clipPath: `circle(0% at ${x}% ${y}%)` },
            enter: { clipPath: `circle(100% at ${x}% ${y}%)` },
            leave: { clipPath: `circle(0% at ${x}% ${y}%)` }
        }, contentProps: {
            ...contentProps,
            className: 'ExpandModal ' + contentProps?.className ?? ''
        } }, props), void 0));
}

export { AnimatedDialogContent, AnimatedDialogOverlay, BaseModal, BottomModal, CenterModal, ExpandModal, ModalCloseTarget, ModalTitle };
//# sourceMappingURL=index.js.map
