import React from 'react';
import { Subscription, GetContentOptions, Builder } from '@builder.io/sdk';
export declare type BuilderContentProps<ContentType> = {
    /**
     * Callback to run when content is fetched and loaded.
     */
    contentLoaded?: (data: any, content: any) => void;
    /**
     * Callback to run if an error occurred while fetching content.
     */
    contentError?: (error: any) => void;
    options?: GetContentOptions;
    children: (content: ContentType, loading?: boolean, fullData?: any) => React.ReactNode;
    /**
     * Only render what was explicitly passed in via `content` - don't fetch from
     * the Builder API.
     *
     * @see content
     */
    inline?: boolean;
    /**
     * @package
     * @deprecated
     */
    dataOnly?: boolean;
    /**
     * @package
     * Pass in a specific builder instance to use instead of the default
     * singleton.
     */
    builder?: Builder;
    /**
     * @deprecated use `Builder.isStatic` instead
     */
    isStatic?: boolean;
    /**
     * Builder content object to use instead of fetching from the API.
     *
     * Required if `inline` is set to `true`.
     */
    content?: BuilderContent;
} & ({
    model: string;
} | {
    modelName: string;
});
/**
 * When passed content json explicitly it'll calculate a/b tests on the content
 * and pass the winning variation down to the children function. If then content
 * prop was omitted it'll try to fetch matching content from your Builder
 * account based on the default user attributes and model.
 *
 * ## Notes
 *
 * A/B testing will show only the default content if DoNotTrack is enabled.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/DNT
 */
export declare class BuilderContent<ContentType extends object = any> extends React.Component<BuilderContentProps<ContentType>> {
    ref: HTMLDivElement | null;
    get builder(): Builder;
    get name(): string;
    get renderedVairantId(): any;
    get options(): {
        userAttributes?: import("@builder.io/sdk/dist/src/builder.class").UserAttributes | undefined;
        url?: string | undefined;
        includeUrl?: boolean | undefined;
        includeRefs?: boolean | undefined;
        cacheSeconds?: number | undefined;
        staleCacheSeconds?: number | undefined;
        limit?: number | undefined;
        query?: any;
        cachebust?: boolean | undefined;
        prerender?: boolean | undefined;
        extractCss?: boolean | undefined;
        offset?: number | undefined;
        initialContent?: any;
        model?: string | undefined;
        cache?: boolean | undefined;
        preview?: boolean | undefined;
        entry?: string | undefined;
        alias?: string | undefined;
        fields?: string | undefined;
        omit?: string | undefined;
        key?: string | undefined;
        format?: "react" | "html" | "email" | "solid" | "amp" | undefined;
        noWrap?: true | undefined;
        rev?: string | undefined;
        static?: boolean | undefined;
        options?: {
            [key: string]: any;
        } | undefined;
        noEditorUpdates?: boolean | undefined;
    };
    get data(): any;
    state: {
        loading: boolean;
        data: any;
        updates: number;
    };
    onWindowMessage: (event: MessageEvent) => void;
    subscriptions: Subscription<Function>;
    firstLoad: boolean;
    clicked: boolean;
    trackedImpression: boolean;
    intersectionObserver: IntersectionObserver | null;
    componentDidMount(): void;
    subscribeToContent(): void;
    componentWillUnmount(): void;
    onClick: (reactEvent: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    render(): JSX.Element | null;
}
