"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("@builder.io/react");
var React = require("react");
var react_masonry_component_1 = require("react-masonry-component");
// TODO: column with, gutter, etc options
var MasonryComponent = /** @class */ (function (_super) {
    __extends(MasonryComponent, _super);
    function MasonryComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.divRef = null;
        _this.masonryRef = null;
        _this.state = {
            layoutComplete: false,
        };
        return _this;
    }
    MasonryComponent.prototype.componentDidMount = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.divRef) {
                _this.divRef.dispatchEvent(new CustomEvent('builder:masonry:load', {
                    bubbles: true,
                    cancelable: false,
                    detail: {
                        block: _this.props.builderBlock,
                        ref: _this.divRef,
                        masonry: _this.masonryRef,
                    },
                }));
            }
            if (react_1.Builder.isEditing) {
                // mutation observer?
            }
        });
    };
    MasonryComponent.prototype.render = function () {
        var _this = this;
        var slides = this.props.tiles;
        // if (slides && !Builder.isBrowser) {
        //   slides = slides.slice(0, 1)
        // }
        var itemStyle = {
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'stretch',
            width: this.props.columnWidth,
        };
        return (React.createElement("div", { style: {
                opacity: react_1.Builder.isBrowser && this.state.layoutComplete ? 1 : 0,
                transition: 'opacity 0.2s',
            } },
            React.createElement(react_1.BuilderAsyncRequestsContext.Consumer, null, function (value) {
                _this._errors = value && value.errors;
                _this._logs = value && value.logs;
                return (React.createElement(react_1.BuilderStoreContext.Consumer, null, function (state) { return (React.createElement("div", { ref: function (ref) { return (_this.divRef = ref); }, className: "builder-masonry" },
                    React.createElement(react_masonry_component_1.default, { onLayoutComplete: function () {
                            if (!_this.state.layoutComplete) {
                                _this.setState(__assign(__assign({}, _this.state), { layoutComplete: true }));
                            }
                        }, options: {
                            gutter: _this.props.gutterSize,
                            // Maybe us this
                            fitWidth: _this.props.columnWidth && _this.props.columnWidth.endsWith('%')
                                ? false
                                : true,
                            percentPosition: 
                            // TODO: option to override this too
                            (_this.props.columnWidth &&
                                (_this.props.columnWidth.endsWith('%') ||
                                    _this.props.columnWidth.startsWith('.'))) ||
                                false,
                        }, ref: function (ref) { return (_this.masonryRef = ref); } }, _this.props.useChildrenForTiles
                        ? _this.props.builderBlock &&
                            _this.props.builderBlock.children &&
                            _this.props.builderBlock.children.map(function (block, index) {
                                if (block.repeat && block.repeat.collection) {
                                    var collectionPath = block.repeat.collection;
                                    var collectionName = (collectionPath || '')
                                        .split(/\.\w+\(/)[0]
                                        .trim()
                                        .split('.')
                                        .pop();
                                    var itemName_1 = block.repeat.itemName ||
                                        (collectionName ? collectionName + 'Item' : 'item');
                                    var array = react_1.stringToFunction(collectionPath, true, _this._errors, _this._logs)(state.state);
                                    if (Array.isArray(array)) {
                                        if (!react_1.Builder.isBrowser) {
                                            array = array.slice(0, 1);
                                        }
                                        return array.map(function (data, index) {
                                            var _a;
                                            // TODO: Builder state produce the data
                                            var childState = __assign(__assign({}, state.state), (_a = { $index: index, $item: data }, _a[itemName_1] = data, _a));
                                            return (React.createElement("div", { className: "masonry-item", style: itemStyle },
                                                React.createElement(react_1.BuilderStoreContext.Provider, { key: block.id, value: __assign(__assign({}, state), { state: childState }) },
                                                    React.createElement(react_1.BuilderBlockComponent, { block: __assign(__assign({}, block), { repeat: null }), index: index, child: true }))));
                                        });
                                    }
                                }
                                return (React.createElement("div", { style: itemStyle, className: "masonry-item" },
                                    React.createElement(react_1.BuilderBlockComponent, { key: block.id, block: block, index: index, child: true })));
                            })
                        : _this.props.tiles &&
                            _this.props.tiles.map(function (tile, index) { return (
                            // TODO: how make react compatible with plain react components
                            // tiles: <Foo><Bar> <- builder blocks if passed react nodes as blocks just forward them
                            React.createElement("div", { style: itemStyle, className: "masonry-item" },
                                React.createElement(react_1.BuilderBlocks, { key: index, parentElementId: _this.props.builderBlock && _this.props.builderBlock.id, dataPath: "component.options.tiles." + index + ".content", child: true, blocks: tile.content || tile }))); })))); }));
            })));
    };
    return MasonryComponent;
}(React.Component));
exports.MasonryComponent = MasonryComponent;
//# sourceMappingURL=Masonry.js.map