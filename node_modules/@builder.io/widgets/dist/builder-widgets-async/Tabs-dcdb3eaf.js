import { BuilderBlocks } from '@builder.io/react';
import { __extends, __assign } from 'tslib';
import { createElement, Fragment, Component } from 'react';

var TabsComponent = /** @class */ (function (_super) {
    __extends(TabsComponent, _super);
    function TabsComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            activeTab: 0,
        };
        return _this;
    }
    Object.defineProperty(TabsComponent.prototype, "activeTabSpec", {
        get: function () {
            return this.props.tabs && this.props.tabs[this.state.activeTab];
        },
        enumerable: true,
        configurable: true
    });
    TabsComponent.prototype.componentWillMount = function () {
        if (this.props.defaultActiveTab) {
            this.activeTab = this.props.defaultActiveTab - 1;
        }
    };
    Object.defineProperty(TabsComponent.prototype, "activeTab", {
        get: function () {
            return this.state.activeTab;
        },
        set: function (tab) {
            this.setState(__assign(__assign({}, this.state), { activeTab: tab }));
        },
        enumerable: true,
        configurable: true
    });
    TabsComponent.prototype.render = function () {
        var _this = this;
        return (createElement(Fragment, null,
            createElement("span", { style: {
                    display: 'flex',
                    flexDirection: 'row',
                    justifyContent: this.props.tabHeaderLayout,
                    overflow: 'auto',
                    WebkitOverflowScrolling: 'touch',
                }, className: "builder-tabs-wrap" }, this.props.tabs &&
                this.props.tabs.map(function (item, index) { return (createElement("span", { key: index, className: 'builder-tab-wrap ' + (_this.activeTabSpec === item ? 'builder-tab-active' : ''), style: __assign({}, ((_this.activeTabSpec === item && _this.props.activeTabStyle) || undefined)), onClick: function () {
                        if (index === _this.activeTab && _this.props.collapsible) {
                            _this.activeTab = -1;
                        }
                        else {
                            _this.activeTab = index;
                        }
                    } },
                    createElement(BuilderBlocks
                    // TODO: parent={this.props.builderBlock}
                    , { 
                        // TODO: parent={this.props.builderBlock}
                        parentElementId: _this.props.builderBlock.id, 
                        // TODO: start with just "tabs." when bump react version
                        dataPath: "component.options.tabs." + _this.state.activeTab + ".label", blocks: item.label }))); })),
            this.activeTabSpec && (createElement(BuilderBlocks, { parentElementId: this.props.builderBlock.id, dataPath: "component.options.tabs." + this.state.activeTab + ".content", blocks: this.activeTabSpec.content }))));
    };
    return TabsComponent;
}(Component));

export { TabsComponent };
//# sourceMappingURL=Tabs-dcdb3eaf.js.map
