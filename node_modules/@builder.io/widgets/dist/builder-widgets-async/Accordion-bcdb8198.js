import { BuilderBlockComponent, BuilderBlocks, BuilderAsyncRequestsContext, BuilderStoreContext, stringToFunction } from '@builder.io/react';
import { __extends, __assign } from 'tslib';
import { createElement, Fragment, Component } from 'react';

// TODO: change to slick grid
var AccordionComponent = /** @class */ (function (_super) {
    __extends(AccordionComponent, _super);
    function AccordionComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.divRef = null;
        _this.state = {
            open: [],
        };
        return _this;
    }
    AccordionComponent.prototype.componentDidMount = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.divRef) {
                _this.divRef.dispatchEvent(new CustomEvent('builder:accordion:load', {
                    bubbles: true,
                    cancelable: false,
                    detail: {
                        ref: _this,
                    },
                }));
            }
        });
    };
    AccordionComponent.prototype.getAccordionItem = function (titleBlocks, detailBlocks, index, openGridItemOrder, onlyOneAtATime, fromChildren) {
        var _this = this;
        if (fromChildren === void 0) { fromChildren = false; }
        var open = this.state.open.indexOf(index) !== -1;
        var grid = this.props.grid;
        return (
        // This will not work as expected with react 15
        // Did preact get the span replacmenet too?
        createElement(Fragment, { key: index },
            createElement("div", { className: "builder-accordion-title builder-accordion-title-" + (open ? 'open' : 'closed'), style: __assign({ cursor: 'pointer', display: 'flex', flexDirection: 'column', alignItems: 'stretch' }, (grid && __assign({ width: this.props.gridRowWidth }, (typeof openGridItemOrder === 'number' && {
                    order: index < openGridItemOrder ? index : index + 1,
                })))), "data-index": index, onClick: function () {
                    if (open) {
                        _this.setState(__assign(__assign({}, _this.state), { open: onlyOneAtATime ? [] : _this.state.open.filter(function (item) { return item !== index; }) }));
                    }
                    else {
                        _this.setState(__assign(__assign({}, _this.state), { open: onlyOneAtATime ? [index] : _this.state.open.concat(index) }));
                    }
                } }, fromChildren ? (titleBlocks.map(function (block, index) { return (createElement(BuilderBlockComponent, { key: index, block: __assign(__assign({}, block), { repeat: null }), index: index, child: true })); })) : (createElement(BuilderBlocks, { blocks: titleBlocks, dataPath: "items." + index + ".title" }))),
            open && (createElement("div", { className: "builder-accordion-detail builder-accordion-detail-" + (open ? 'open' : 'closed'), style: __assign({ order: typeof openGridItemOrder === 'number' ? openGridItemOrder : undefined, maxHeight: this.props.animate ? (open ? '100vh' : 0) : undefined, transition: this.props.animate ? 'max-height 0.5s' : undefined }, (grid && {
                    width: '100%',
                })) }, open &&
                (fromChildren ? (detailBlocks.map(function (block, index) { return (createElement(BuilderBlockComponent, { key: index, block: __assign(__assign({}, block), { repeat: null }), index: index, child: true })); })) : (createElement(BuilderBlocks, { blocks: detailBlocks, dataPath: "items." + index + ".detail" })))))));
    };
    AccordionComponent.prototype.render = function () {
        var _this = this;
        var _a = this.props, grid = _a.grid, oneAtATime = _a.oneAtATime;
        var onlyOneAtATime = Boolean(grid || oneAtATime);
        var getOpenGridItemPosition = grid && this.state.open.length;
        var openGridItemOrder = null;
        if (getOpenGridItemPosition && this.divRef) {
            var openItemIndex = this.state.open[0];
            var openItem = this.divRef.querySelector(".builder-accordion-title[data-index=\"" + openItemIndex + "\"]");
            var subjectItem = openItem;
            openGridItemOrder = openItemIndex;
            if (subjectItem) {
                var prevItemRect = subjectItem.getBoundingClientRect();
                while ((subjectItem = subjectItem && subjectItem.nextElementSibling)) {
                    if (subjectItem) {
                        if (subjectItem.classList.contains('builder-accordion-detail')) {
                            continue;
                        }
                        var subjectItemRect = subjectItem.getBoundingClientRect();
                        if (subjectItemRect.left > prevItemRect.left) {
                            var index = parseInt(subjectItem.getAttribute('data-index') || '', 10);
                            if (!isNaN(index)) {
                                prevItemRect = subjectItemRect;
                                openGridItemOrder = index;
                            }
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        }
        if (typeof openGridItemOrder === 'number') {
            openGridItemOrder = openGridItemOrder + 1;
        }
        return (createElement(BuilderAsyncRequestsContext.Consumer, null, function (value) {
            _this._errors = value && value.errors;
            _this._logs = value && value.logs;
            return (createElement(BuilderStoreContext.Consumer, null, function (state) { return (createElement("div", { ref: function (ref) { return (_this.divRef = ref); }, className: "builder-accordion", style: __assign({ display: 'flex', alignItems: 'stretch', flexDirection: 'column' }, (grid && {
                    flexDirection: 'row',
                    alignItems: 'flex-start',
                    flexWrap: 'wrap',
                })) }, _this.props.useChildrenForItems
                ? _this.props.builderBlock &&
                    _this.props.builderBlock.children &&
                    _this.props.builderBlock.children.map(function (block, index) {
                        if (block.repeat && block.repeat.collection) {
                            var collectionPath = block.repeat.collection;
                            var collectionName = (collectionPath || '')
                                .split(/\.\w+\(/)[0]
                                .trim()
                                .split('.')
                                .pop();
                            var itemName_1 = block.repeat.itemName ||
                                (collectionName ? collectionName + 'Item' : 'item');
                            var array = stringToFunction(collectionPath, true, _this._errors, _this._logs)(state.state);
                            if (Array.isArray(array)) {
                                return array.map(function (data, index) {
                                    var _a;
                                    // TODO: Builder state produce the data
                                    var childState = __assign(__assign({}, state.state), (_a = { $index: index, $item: data }, _a[itemName_1] = data, _a));
                                    return (createElement(BuilderStoreContext.Provider, { key: block.id, value: __assign(__assign({}, state), { state: childState }) }, _this.getAccordionItem(block.children ? [block.children[0]] : [], block.children ? [block.children[1]] : [], index, openGridItemOrder, onlyOneAtATime, true)));
                                });
                            }
                        }
                        return _this.getAccordionItem(block.children ? [block.children[0]] : [], block.children ? [block.children[1]] : [], index, openGridItemOrder, onlyOneAtATime, true);
                    })
                : _this.props.items &&
                    _this.props.items.map(function (item, index) {
                        return _this.getAccordionItem(item.title, item.detail, index, openGridItemOrder, onlyOneAtATime);
                    }))); }));
        }));
    };
    return AccordionComponent;
}(Component));

export { AccordionComponent };
//# sourceMappingURL=Accordion-bcdb8198.js.map
