import dynamic from 'next/dynamic';
import { Builder } from '@builder.io/react';
import { __assign } from 'tslib';

var defaultElement = {
    '@type': '@builder.io/sdk:Element',
    responsiveStyles: {
        large: {
            // TODO: always apply these if not given
            position: 'relative',
            display: 'flex',
            alignItems: 'stretch',
            flexDirection: 'column',
            height: '400px',
        },
    },
    children: [
        {
            '@type': '@builder.io/sdk:Element',
            responsiveStyles: {
                large: {
                    marginTop: '50px',
                    textAlign: 'center',
                    display: 'flex',
                    flexDirection: 'column',
                },
            },
            component: {
                name: 'Text',
                options: {
                    text: 'I am a slide',
                },
            },
        },
    ],
};
var defaultButton = {
    '@type': '@builder.io/sdk:Element',
    responsiveStyles: {
        large: {
            position: 'relative',
            display: 'flex',
            alignItems: 'stretch',
            flexDirection: 'column',
            height: '30px',
        },
    },
};
var carouselConfig = {
    name: 'Builder:Carousel',
    // TODO: default children
    canHaveChildren: true,
    defaultStyles: {
        paddingLeft: '30px',
        paddingRight: '30px',
        paddingBottom: '30px',
    },
    inputs: [
        {
            name: 'slides',
            type: 'list',
            subFields: [
                {
                    name: 'content',
                    type: 'uiBlocks',
                    hideFromUI: true,
                    defaultValue: [defaultElement],
                },
            ],
            defaultValue: [
                {
                    content: [defaultElement],
                },
                {
                    content: [defaultElement],
                },
            ],
            showIf: function (options) { return !options.get('useChildrenForSlides'); },
        },
        {
            name: 'hideDots',
            helperText: 'Show pagination dots',
            type: 'boolean',
            defaultValue: false,
        },
        {
            name: 'autoplay',
            helperText: 'Automatically rotate to the next slide every few seconds',
            type: 'boolean',
            defaultValue: false,
        },
        {
            name: 'autoplaySpeed',
            type: 'number',
            defaultValue: 5,
            helperText: 'If auto play is on, how many seconds to wait before automatically changing each slide',
            showIf: function (options) { return options.get('autoplay'); },
        },
        {
            name: 'prevButton',
            type: 'uiBlocks',
            hideFromUI: true,
            defaultValue: [
                __assign(__assign({}, defaultButton), { component: {
                        name: 'Image',
                        options: {
                            image: 'https://cdn.builder.io/api/v1/image/assets%2FagZ9n5CUKRfbL9t6CaJOyVSK4Es2%2Fd909a5b91650499c9e0524cc904eeb77',
                        },
                    } }),
            ],
        },
        {
            name: 'nextButton',
            type: 'uiBlocks',
            hideFromUI: true,
            defaultValue: [
                __assign(__assign({}, defaultButton), { component: {
                        name: 'Image',
                        options: {
                            image: 'https://cdn.builder.io/api/v1/image/assets%2FagZ9n5CUKRfbL9t6CaJOyVSK4Es2%2Fdb2a9827561249aea3817b539aacdcdc',
                        },
                    } }),
            ],
        },
        {
            name: 'useChildrenForSlides',
            type: 'boolean',
            helperText: 'Use child elements for each slide, instead of the array. Useful for dynamically repeating slides',
            advanced: true,
            defaultValue: false,
            onChange: function (options) {
                if (options.get('useChildrenForSlides') === true) {
                    options.set('slides', []);
                }
            },
        },
        {
            name: 'responsive',
            type: 'array',
            helperText: 'Responsive settings - e.g. see https://kenwheeler.github.io/slick/',
            advanced: true,
            defaultValue: [
                {
                    width: 3000,
                    slidesToShow: 2,
                    slidesToScroll: 2,
                },
                {
                    width: 400,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                },
            ],
            subFields: [
                {
                    name: 'breakpoint',
                    type: 'number',
                    defaultValue: 400,
                    required: true,
                },
                {
                    name: 'settings',
                    type: 'object',
                    defaultValue: {
                        slidesToShow: 2,
                        slidesToScroll: 2,
                    },
                    subFields: [
                        {
                            name: 'slidesToShow',
                            type: 'number',
                            defaultValue: 2,
                        },
                        {
                            name: 'slidesToScroll',
                            type: 'number',
                            defaultValue: 2,
                        },
                        {
                            name: 'infinite',
                            type: 'boolean',
                            defaultValue: true,
                        },
                        {
                            name: 'dots',
                            type: 'boolean',
                            defaultValue: true,
                        },
                    ],
                },
            ],
        },
    ],
};

var defaultTab = {
    '@type': '@builder.io/sdk:Element',
    responsiveStyles: {
        large: {
            paddingLeft: '20px',
            paddingRight: '20px',
            paddingTop: '10px',
            paddingBottom: '10px',
            minWidth: '100px',
            textAlign: 'center',
            // TODO: add to all
            display: 'flex',
            flexDirection: 'column',
            cursor: 'pointer',
            userSelect: 'none',
        },
    },
    component: {
        // Builder:text
        name: 'Text',
        options: {
            text: 'New tab',
        },
    },
};
var defaultElement$1 = {
    '@type': '@builder.io/sdk:Element',
    responsiveStyles: {
        large: {
            height: '200px',
            display: 'flex',
            marginTop: '20px',
            flexDirection: 'column',
        },
    },
    component: {
        name: 'Text',
        options: {
            text: 'New tab content ',
        },
    },
};
var tabsConfig = {
    name: 'Builder: Tabs',
    inputs: [
        {
            name: 'tabs',
            type: 'list',
            subFields: [
                {
                    name: 'label',
                    type: 'uiBlocks',
                    hideFromUI: true,
                    defaultValue: [defaultTab],
                },
                {
                    name: 'content',
                    type: 'uiBlocks',
                    hideFromUI: true,
                    defaultValue: [defaultElement$1],
                },
            ],
            defaultValue: [
                {
                    label: [
                        __assign(__assign({}, defaultTab), { component: {
                                name: 'Text',
                                options: {
                                    text: 'Tab 1',
                                },
                            } }),
                    ],
                    content: [
                        __assign(__assign({}, defaultElement$1), { component: {
                                name: 'Text',
                                options: {
                                    text: 'Tab 1 content',
                                },
                            } }),
                    ],
                },
                {
                    label: [
                        __assign(__assign({}, defaultTab), { component: {
                                name: 'Text',
                                options: {
                                    text: 'Tab 2',
                                },
                            } }),
                    ],
                    content: [
                        __assign(__assign({}, defaultElement$1), { component: {
                                name: 'Text',
                                options: {
                                    text: 'Tab 2 content',
                                },
                            } }),
                    ],
                },
            ],
        },
        {
            name: 'activeTabStyle',
            type: 'uiStyle',
            helperText: 'CSS styles for the active tab',
            defaultValue: {
                backgroundColor: 'rgba(0, 0, 0, 0.1)',
            },
        },
        {
            name: 'defaultActiveTab',
            type: 'number',
            helperText: 'Deafult tab to open to. Set to "1" for the first tab, "2" for the second, or choose "0" for none',
            defaultValue: 1,
            advanced: true,
        },
        {
            name: 'collapsible',
            type: 'boolean',
            helperText: 'If on, clicking an open tab closes it so no tabs are active',
            defaultValue: false,
            advanced: true,
        },
        {
            name: 'tabHeaderLayout',
            type: 'enum',
            helperText: 'Change the layout of the tab headers (uses justify-content)',
            defaultValue: 'flex-start',
            enum: [
                { label: 'Center', value: 'center' },
                { label: 'Space between', value: 'space-between' },
                { label: 'Space around', value: 'space-around' },
                { label: 'Left', value: 'flex-start' },
                { label: 'Right', value: 'flex-end' },
            ],
        },
    ],
};

var defaultTitle = {
    '@type': '@builder.io/sdk:Element',
    layerName: 'Accordion item title',
    responsiveStyles: {
        large: {
            marginTop: '10px',
            position: 'relative',
            display: 'flex',
            alignItems: 'stretch',
            flexDirection: 'column',
            paddingBottom: '10px',
        },
    },
    children: [
        {
            '@type': '@builder.io/sdk:Element',
            responsiveStyles: {
                large: {
                    textAlign: 'left',
                    display: 'flex',
                    flexDirection: 'column',
                },
            },
            component: {
                name: 'Text',
                options: {
                    text: 'I am an accordion title. Click me!',
                },
            },
        },
    ],
};
var defaultDetail = {
    '@type': '@builder.io/sdk:Element',
    layerName: 'Accordion item detail',
    responsiveStyles: {
        large: {
            position: 'relative',
            display: 'flex',
            alignItems: 'stretch',
            flexDirection: 'column',
            marginTop: '10px',
            paddingBottom: '10px',
        },
    },
    children: [
        {
            '@type': '@builder.io/sdk:Element',
            responsiveStyles: {
                large: {
                    paddingTop: '50px',
                    textAlign: 'left',
                    display: 'flex',
                    flexDirection: 'column',
                    paddingBottom: '50px',
                },
            },
            component: {
                name: 'Text',
                options: {
                    text: 'I am an accordion detail, hello!',
                },
            },
        },
    ],
};
var accordionConfig = {
    name: 'Builder:Accordion',
    canHaveChildren: true,
    image: 'https://cdn.builder.io/api/v1/image/assets%2FagZ9n5CUKRfbL9t6CaJOyVSK4Es2%2Ffab6c1fd3fe542408cbdec078bca7f35',
    defaultStyles: {
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'stretch',
    },
    inputs: [
        {
            name: 'items',
            type: 'list',
            subFields: [
                {
                    name: 'title',
                    type: 'uiBlocks',
                    hideFromUI: true,
                    defaultValue: [defaultTitle],
                },
                {
                    name: 'detail',
                    type: 'uiBlocks',
                    hideFromUI: true,
                    defaultValue: [defaultDetail],
                },
            ],
            defaultValue: [
                {
                    title: [defaultTitle],
                    detail: [defaultDetail],
                },
                {
                    title: [defaultTitle],
                    detail: [defaultDetail],
                },
            ],
            showIf: function (options) { return !options.get('useChildrenForItems'); },
        },
        {
            name: 'oneAtATime',
            helperText: 'Only allow opening one at a time (collapse all others when new item openned)',
            type: 'boolean',
            defaultValue: false,
        },
        {
            name: 'animate',
            helperText: 'Animate openning and closing',
            type: 'boolean',
            defaultValue: true,
        },
        {
            name: 'grid',
            helperText: 'Display as a grid',
            type: 'boolean',
            defaultValue: false,
        },
        {
            name: 'gridRowWidth',
            helperText: 'Display as a grid',
            type: 'string',
            showIf: function (options) { return options.get('grid'); },
            defaultValue: '25%',
        },
        {
            name: 'useChildrenForItems',
            type: 'boolean',
            helperText: 'Use child elements for each slide, instead of the array. Useful for dynamically repeating items',
            advanced: true,
            defaultValue: false,
            onChange: function (options) {
                if (options.get('useChildrenForItems') === true) {
                    options.set('items', []);
                }
            },
        },
    ],
};

var getRandomAspectTile = function () { return (__assign(__assign({}, defaultTile), { component: __assign(__assign({}, defaultTile.component), { options: __assign(__assign({}, defaultTile.component.options), { 
            // range from 0.5 to 2, rounded to 2 decimal points
            aspectRatio: Math.round((Math.random() * 1.5 + 0.5) * 100) / 100 }) }) })); };
var defaultTile = {
    '@type': '@builder.io/sdk:Element',
    responsiveStyles: {
        large: {
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'stretch',
            position: 'relative',
            flexShrink: '0',
            boxSizing: 'border-box',
            marginTop: '20px',
            minHeight: '20px',
            minWidth: '20px',
            overflow: 'hidden',
            marginLeft: '20px',
        },
    },
    component: {
        name: 'Image',
        options: {
            image: 'https://builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d?width=2000&height=1200',
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            aspectRatio: 0.7041,
        },
    },
};
var masonryConfig = {
    name: 'Builder:Masonry',
    // TODO: default children
    image: 'https://cdn.builder.io/api/v1/image/assets%2FBvYIl5jKN9QpChUB3PVzsTe2ZSI2%2F7ed6bd8129d148608ecec09300786d71?width=2000&height=1200',
    canHaveChildren: true,
    defaultStyles: {
        paddingLeft: '20px',
        paddingRight: '20px',
        paddingBottom: '20px',
    },
    defaultChildren: [
        getRandomAspectTile(),
        getRandomAspectTile(),
        getRandomAspectTile(),
        getRandomAspectTile(),
        getRandomAspectTile(),
        getRandomAspectTile(),
        getRandomAspectTile(),
        getRandomAspectTile(),
        getRandomAspectTile(),
    ],
    inputs: [
        {
            name: 'columnWidth',
            // TODO: type: 'styleNumber'
            type: 'string',
            helperText: 'Width of each tile, as a CSS value. E.g. "200px" or "50%"',
            defaultValue: '200px',
        },
        {
            name: 'gutterSize',
            type: 'number',
            helperText: 'Horizontal space between tiles in pixels, e.g. "20" for 20 pixels wide',
            defaultValue: 0,
            advanced: true,
        },
        {
            name: 'tiles',
            type: 'list',
            subFields: [
                {
                    name: 'content',
                    type: 'uiBlocks',
                    hideFromUI: true,
                    defaultValue: [defaultTile],
                },
            ],
            defaultValue: [],
            showIf: function (options) { return !options.get('useChildrenForTiles'); },
        },
        {
            name: 'useChildrenForTiles',
            type: 'boolean',
            helperText: 'Use child elements for each slide, instead of the array. Useful for dynamically repeating tiles',
            advanced: true,
            defaultValue: true,
            onChange: function (options) {
                if (options.get('useChildrenForTiles') === true) {
                    options.set('tiles', []);
                }
            },
        },
    ],
};

Builder.registerComponent(dynamic(function () { return import('./Carousel-4b80eb29.js').then(function (mod) { return mod.CarouselComponent; }); }), carouselConfig);
Builder.registerComponent(dynamic(function () { return import('./Tabs-dcdb3eaf.js').then(function (mod) { return mod.TabsComponent; }); }), tabsConfig);
Builder.registerComponent(dynamic(function () { return import('./Accordion-bcdb8198.js').then(function (mod) { return mod.AccordionComponent; }); }), accordionConfig);
Builder.registerComponent(dynamic(function () { return import('./Masonry-7bd42488.js').then(function (mod) { return mod.MasonryComponent; }); }), masonryConfig);
//# sourceMappingURL=builder-widgets-async.js.map
