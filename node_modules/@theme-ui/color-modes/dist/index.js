var React = require('react');
var core = require('@theme-ui/core');
var css = require('@theme-ui/css');
var react = require('@emotion/react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var toVarName = function toVarName(key) {
  return "--theme-ui-" + key.replace('-__default', '');
};

var toVarValue = function toVarValue(key) {
  return "var(" + toVarName(key) + ")";
};

var join = function join() {
  return [].slice.call(arguments).filter(Boolean).join('-');
};
var reservedKeys = {
  useCustomProperties: true,
  initialColorModeName: true,
  printColorModeName: true,
  initialColorMode: true,
  useLocalStorage: true
};


var toCustomProperties = function toCustomProperties(obj, parent, themeKey) {
  var next = Array.isArray(obj) ? [] : {};

  for (var key in obj) {
    var value = obj[key];
    var name = join(parent, key);

    if (value && typeof value === 'object') {
      next[key] = toCustomProperties(value, name);
      continue;
    }

    if (reservedKeys[key]) {
      next[key] = value;
      continue;
    }
    next[key] = toVarValue(name);
  }

  return next;
};
var objectToVars = function objectToVars(parent, obj) {
  var vars = {};

  for (var key in obj) {
    if (key === 'modes') continue;
    var name = join(parent, key);
    var value = obj[key];

    if (value && typeof value === 'object') {
      vars = _extends({}, vars, objectToVars(name, value));
    } else {
      vars[toVarName(name)] = value;
    }
  }

  return vars;
}; // create root styles for color modes

var createColorStyles = function createColorStyles(theme) {
  var _css2;

  if (theme === void 0) {
    theme = {};
  }

  var rootStyles = css.__internalGetUseRootStyles(theme);

  var colors = theme.rawColors || theme.colors;
  if (!colors || rootStyles.rootStyles === false) return {};

  if (theme.useCustomProperties === false) {
    var _css;

    return css.css((_css = {}, _css[rootStyles.scope] = {
      color: 'text',
      bg: 'background'
    }, _css))(theme);
  }

  var _theme = theme,
      initialColorModeName = _theme.initialColorModeName,
      printColorModeName = _theme.printColorModeName;
  var modes = colors.modes || {};
  var styles = objectToVars('colors', colors);
  Object.keys(modes).forEach(function (mode) {
    var key = "&.theme-ui-" + mode;
    styles[key] = objectToVars('colors', modes[mode]);
  });

  if (printColorModeName) {
    var mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];
    styles['@media print'] = objectToVars('colors', mode);
  }

  var colorToVarValue = function colorToVarValue(color) {
    return toVarValue("colors-" + color);
  };

  return css.css((_css2 = {}, _css2[rootStyles.scope] = _extends({}, styles, {
    color: colorToVarValue('text'),
    bg: colorToVarValue('background')
  }), _css2))(theme);
};

var STORAGE_KEY = 'theme-ui-color-mode';
var storage = {
  get: function get() {
    try {
      return window.localStorage.getItem(STORAGE_KEY);
    } catch (e) {
      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);
    }
  },
  set: function set(value) {
    try {
      window.localStorage.setItem(STORAGE_KEY, value);
    } catch (e) {
      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', e);
    }
  }
};

var getPreferredColorScheme = function getPreferredColorScheme() {
  if (typeof window !== 'undefined' && window.matchMedia) {
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }

    if (window.matchMedia('(prefers-color-scheme: light)').matches) {
      return 'light';
    }
  }

  return null;
};

var getModeFromClass = function getModeFromClass() {
  var mode;

  if (typeof document !== 'undefined') {
    document.documentElement.classList.forEach(function (className) {
      if (className.startsWith('theme-ui-')) {
        mode = className.replace('theme-ui-', '');
      }
    });
  }

  return mode;
};

var useColorModeState = function useColorModeState(theme) {
  if (theme === void 0) {
    theme = {};
  }

  var _useState = React.useState(function () {
    var modeFromClass = getModeFromClass();

    if (modeFromClass) {
      return modeFromClass;
    }

    var preferredMode = theme.useColorSchemeMediaQuery !== false && getPreferredColorScheme();
    return preferredMode || theme.initialColorModeName;
  }),
      mode = _useState[0],
      setMode = _useState[1]; // on first render, we read the color mode from localStorage and
  // clear the class on document element body


  React.useEffect(function () {
    var stored = theme.useLocalStorage !== false && storage.get();

    if (typeof document !== 'undefined') {
      document.documentElement.classList.remove('theme-ui-' + stored);
      document.body.classList.remove('theme-ui-' + stored);
    }

    if (stored && stored !== mode) {
      mode = stored;
      setMode(stored);
    }
  }, []); // when mode changes, we save it to localStorage

  React__default['default'].useEffect(function () {
    if (mode && theme.useLocalStorage !== false) {
      storage.set(mode);
    }
  }, [mode]);

  if (process.env.NODE_ENV !== 'production') {
    if (theme.colors && theme.colors.modes && theme.initialColorModeName && Object.keys(theme.colors.modes).indexOf(theme.initialColorModeName) > -1) {
      console.warn('The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');
    }
  }

  return [mode, setMode];
};

function useColorMode() {
  var _useThemeUI = core.useThemeUI(),
      colorMode = _useThemeUI.colorMode,
      setColorMode = _useThemeUI.setColorMode;

  if (typeof setColorMode !== 'function') {
    throw new Error("[useColorMode] requires the ColorModeProvider component");
  } // We're allowing the user to specify a narrower type for its color mode name.


  return [colorMode, setColorMode];
}

var applyColorMode = function applyColorMode(theme, mode) {
  if (!mode) return _extends({}, theme);
  var modes = css.get(theme, 'colors.modes', {});
  return core.merge.all({}, theme, {
    colors: css.get(modes, mode, {})
  });
};

var ColorModeProvider = function ColorModeProvider(_ref) {
  var children = _ref.children;
  var outer = core.useThemeUI();

  var _useColorModeState = useColorModeState(outer.theme),
      colorMode = _useColorModeState[0],
      setColorMode = _useColorModeState[1];

  var theme = applyColorMode(outer.theme || {}, colorMode);

  if (theme.useCustomProperties !== false) {
    // TODO: This mutation is less than ideal
    // We could save custom properties to `theme.colorVars`,
    // But it's infeasible to do this because of how the packages are split.
    theme.rawColors = theme.colors;
    theme.colors = toCustomProperties(theme.colors, 'colors');
  }

  var context = _extends({}, outer, {
    theme: theme,
    colorMode: colorMode,
    setColorMode: setColorMode
  });

  var isTopLevelColorModeProvider = outer.setColorMode === undefined;
  return core.jsx(core.__ThemeUIInternalBaseThemeProvider, {
    context: context
  }, isTopLevelColorModeProvider ? core.jsx(react.Global, {
    styles: function styles() {
      return createColorStyles(theme);
    }
  }) : core.jsx('div', {
    className: 'theme-ui__nested-color-mode-provider',
    // TODO: This could be refactored a bit.
    style: createColorStyles(theme)[css.__internalGetUseRootStyles(theme).scope]
  }), children);
};
var noflash = "(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n  document.body.classList.add('theme-ui-' + mode);\n} catch (e) {} })();";
var InitializeColorMode = function InitializeColorMode() {
  return core.jsx('script', {
    key: 'theme-ui-no-flash',
    dangerouslySetInnerHTML: {
      __html: noflash
    }
  });
};

exports.ColorModeProvider = ColorModeProvider;
exports.InitializeColorMode = InitializeColorMode;
exports.useColorMode = useColorMode;
//# sourceMappingURL=index.js.map
