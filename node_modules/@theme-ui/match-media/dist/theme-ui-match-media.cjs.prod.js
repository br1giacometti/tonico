'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var core = require('@theme-ui/core');
var css = require('@theme-ui/css');

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

var useBreakpointIndex = function useBreakpointIndex() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var context = core.useThemeUI();
  var _options$defaultIndex = options.defaultIndex,
      defaultIndex = _options$defaultIndex === void 0 ? 0 : _options$defaultIndex;
  var breakpoints = context.theme && context.theme.breakpoints || css.defaultBreakpoints;

  if (typeof defaultIndex !== 'number') {
    throw new TypeError("Default breakpoint index should be a number. Got: ".concat(defaultIndex, ", ").concat(_typeof(defaultIndex)));
  } else if (defaultIndex < 0 || defaultIndex > breakpoints.length - 1) {
    throw new RangeError("Default breakpoint index out of range. Theme has ".concat(breakpoints.length, " breakpoints, got index ").concat(defaultIndex));
  }

  var _useState = react.useState(defaultIndex),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  react.useEffect(function () {
    var getIndex = function getIndex() {
      return breakpoints.filter(function (bp) {
        return window.matchMedia("screen and (min-width: ".concat(bp, ")")).matches;
      }).length;
    };

    var onResize = function onResize() {
      var newValue = getIndex();

      if (value !== newValue) {
        setValue(newValue);
      }
    };

    onResize();
    window.addEventListener('resize', onResize);
    return function () {
      return window.removeEventListener('resize', onResize);
    };
  }, [breakpoints, value]);
  return value;
};
function useResponsiveValue(values) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _useThemeUI = core.useThemeUI(),
      theme = _useThemeUI.theme;

  var array = typeof values === 'function' ? values(theme) : values;
  var index = useBreakpointIndex(options);
  return array[index >= array.length ? array.length - 1 : index];
}

exports.useBreakpointIndex = useBreakpointIndex;
exports.useResponsiveValue = useResponsiveValue;
